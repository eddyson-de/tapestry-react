plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id "com.moowork.node" version "1.0.1"
}

description = "Use React together with Tapestry"

group = "de.eddyson"
version = "0.18.0-SNAPSHOT"

apply plugin: 'groovy'
apply plugin: 'maven'


def versions= [
  react: '15.3.2',
  webjars: '1.0.0',
  tapestry: '5.4.1',
  slf4j: '1.7.22',
  
  // test scopes
  spock: '1.0-groovy-2.4',
  selenium: '3.0.1'
  
]

repositories {
  jcenter()
}

sourceCompatibility = '1.7'

task sourceJar(type: Jar) {
  dependsOn classes
  classifier "sources"
  from sourceSets.main.allSource
}

artifacts {
  archives sourceJar
}

dependencies {
  compile "org.slf4j:slf4j-api:$versions.slf4j"
  compile "org.apache.tapestry:tapestry-core:$versions.tapestry"
  compile "de.eddyson:tapestry-webjars:$versions.webjars"
  compile "org.apache.tapestry:tapestry-webresources:$versions.tapestry"
  
  runtime "org.webjars.bower:react:$versions.react"

  testCompile "javax.servlet:servlet-api:2.5"
  testCompile "org.spockframework:spock-tapestry:$versions.spock"
  testCompile 'de.eddyson:tapestry-geb:0.30.2'
  testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$versions.selenium"
  
  testRuntime "org.slf4j:slf4j-simple:$versions.slf4j"
  testRuntime "cglib:cglib-nodep:3.2.4"
  testRuntime 'org.objenesis:objenesis:2.4'
}

def compiledCoffeeScriptDir = "${project.buildDir}/compiled-coffeescript"
def generatedJavaScriptDir = "${project.buildDir}/generated-js"

task compileCoffeeScript(type: NodeTask, dependsOn: npmInstall) {
  inputs.files fileTree(dir: 'src/main/resources/META-INF/modules', include: '**/*.coffee')
  outputs.dir compiledCoffeeScriptDir

  script = file('node_modules/.bin/coffee')
  args = [ "-c", "-o", compiledCoffeeScriptDir, 'src/main/resources/META-INF/modules' ]
  doFirst {
    delete compiledCoffeeScriptDir
  }
}

def generatedCompiler = "$generatedJavaScriptDir/de/eddyson/tapestry/react/services/browser.js"

task createBabelBrowserPackage(type: NodeTask, dependsOn: npmInstall) {
  inputs.file 'package.json'
  inputs.file "src/main/resources/de/eddyson/tapestry/react/services/babel-compiler-wrapper.js"
  outputs.file generatedCompiler

  script = file('node_modules/.bin/browserify')
  args = ['src/main/resources/de/eddyson/tapestry/react/services/babel-compiler-wrapper.js',
     '-s', 'Babel',
     '-o', generatedCompiler,
     '--plugin', 'derequire/plugin',
     '--plugin', 'bundle-collapser/plugin',
     '-g', '[', 'envify', 'purge', '--NODE_ENV', 'production', ']',
     '-p', '[', 'minifyify', '--no-map', ']',
     '-i', 'esprima-fb',
     '-i', 'through']
  doFirst {
    file(generatedCompiler).parentFile.mkdirs()
  }
  doLast {
    // rewrite the Resource to work around
    // https://github.com/mozilla/rhino/issues/153

    // try-catch pattern
    file(generatedCompiler).text = file(generatedCompiler).text.replaceFirst(/\Qvoid 0;try{throw new Error}catch(t){a=t.stack.split("\n").slice(1).join("\n")}\E/, '"transforming JSX template";')
  
  }
}

sourceSets {
  main {
    resources {
      srcDir generatedJavaScriptDir
    }
  }
}

processResources.dependsOn(createBabelBrowserPackage)

jar {
  dependsOn compileCoffeeScript
  manifest { attributes 'Tapestry-Module-Classes': 'de.eddyson.tapestry.react.ReactModule' }
  rootSpec.exclude 'META-INF/modules/**/*.coffee'
  from(compiledCoffeeScriptDir){ into "META-INF/modules" }
  from(generatedJavaScriptDir)
}

tasks.withType(Test){
  systemProperties["tapestry.service-reloading-enabled"] = "false"
  systemProperties["tapestry.execution-mode"] = "test"
  systemProperty 'webappLocation', 'src/test/webapp'
  systemProperty 'jettyPort', 9040
  enableAssertions = true
}

task runTestApp(type:JavaExec) {
  main = 'org.apache.tapestry5.test.Jetty7Runner'
  args "-d", "src/test/webapp/", "-p", "9040"
  systemProperties["tapestry.execution-mode"] = "test"
  classpath = configurations.testRuntime + sourceSets.test.output + sourceSets.main.output
}

clean {
  delete 'node_modules'
}

bintray {
    user = 'fooberger'
    key = System.env.bintrayAPIKey
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'de.eddyson:tapestry-react'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/eddyson-de/tapestry-react'
    }
}

uploadArchives {
  // We need to set the variables if not present
  ext.snapshot_repository = project.hasProperty('snapshot-repository') ? project.property('snapshot-repository') : ''
  ext.snapshot_repository_username = project.hasProperty('snapshot-repository-username') ? project.property('snapshot-repository-username') : ''
  ext.snapshot_repository_password = project.hasProperty('snapshot-repository-password') ? project.property('snapshot-repository-password') : ''

  repositories {
      mavenDeployer {
          snapshotRepository(url: snapshot_repository) {
              authentication(userName: snapshot_repository_username, password: snapshot_repository_password)
          }
      }
  }
}
